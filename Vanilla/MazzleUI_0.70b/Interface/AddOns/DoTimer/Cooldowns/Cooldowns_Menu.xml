<Ui xmlns="http://www.blizzard.com/wow/ui/"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://www.blizzard.com/wow/ui/">
	<Slider name="CooldownsSliderTemplate" virtual="true" orientation="HORIZONTAL" enableMouse="true">
		<Size>
			<AbsDimension x="128" y="17"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="0" right="0" top="-10" bottom="-10"/>
		</HitRectInsets>
		<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
			<EdgeSize>
				<AbsValue val="8"/>
			</EdgeSize>
			<TileSize>
				<AbsValue val="8"/>
			</TileSize>
			<BackgroundInsets>
				<AbsInset left="3" right="3" top="6" bottom="6"/>
			</BackgroundInsets>
		</Backdrop>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="BOTTOM" relativePoint="TOP"/>
					</Anchors>
				</FontString>
				<FontString name="$parentLow" inherits="GameFontHighlightSmall" text="LOW">
					<Anchors>
						<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentHigh" inherits="GameFontHighlightSmall" text="HIGH">
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentValue" inherits="GameFontHighlightSmall" text="VALUE">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="3" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
			<OnValueChanged> 
				local value = this:GetValue()
				local formatstring
				if math.floor(value) == value then 
					formatstring = "%2d"
				else
					formatstring = "%.2f"
				end
				getglobal(this:GetName().."Value"):SetText(string.format(formatstring,value)); 
			</OnValueChanged>
		</Scripts>
		<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
			<Size>
				<AbsDimension x="32" y="32"/>
			</Size>
		</ThumbTexture>
	</Slider>
	<CheckButton name="CooldownsCheckButtonTemplate" virtual="true">
		<HitRectInsets>
			<AbsInset left="0" right="-100" top="0" bottom="0"/>
		</HitRectInsets>
		<Size>
			<AbsDimension x="32" y="32"/>
		</Size>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="-2" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<NormalTexture file="Interface\Buttons\UI-CheckBox-Up"/>
		<PushedTexture file="Interface\Buttons\UI-CheckBox-Down"/>
		<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD"/>
		<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check"/>
		<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled"/>
		<Scripts>
			<OnClick>
				if this:GetChecked() then
					PlaySound("igMainMenuOptionCheckBoxOn");
					this:SetChecked(1)
				else
					PlaySound("igMainMenuOptionCheckBoxOff");
					this:SetChecked(0)
				end
			</OnClick>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
		</Scripts>
	</CheckButton>
	<Button name="CooldownsButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="120" y="21"/>
		</Size>
		<ButtonText name="$parentText"/>
		<NormalFont inherits="GameFontNormal"/>
		<HighlightFont inherits="GameFontHighlight"/>
		<DisabledFont inherits="GameFontDisable"/>
		<NormalTexture inherits="UIPanelButtonUpTexture"/>
		<PushedTexture inherits="UIPanelButtonDownTexture"/>
		<DisabledTexture inherits="UIPanelButtonDisabledTexture"/>
		<HighlightTexture inherits="UIPanelButtonHighlightTexture"/>
		<Scripts>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
		</Scripts>			
	</Button>
	<EditBox name="CooldownsEditBoxTemplate" enableMouse="true" virtual="true" autoFocus="false">
		<Size>
			<AbsDimension x="100" y="30"/>
		</Size>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture name="$parentLeft" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="8" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="LEFT">
							<Offset>
								<AbsDimension x="-5" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0" right="0.0625" top="0" bottom="0.625"/>
				</Texture>
				<Texture name="$parentRight" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="8" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="RIGHT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0.9375" right="1.0" top="0" bottom="0.625"/>
				</Texture>
				<Texture name="$parentMiddle" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="10" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="LEFT" relativeTo="$parentLeft" relativePoint="RIGHT"/>
						<Anchor point="RIGHT" relativeTo="$parentRight" relativePoint="LEFT"/>
					</Anchors>
					<TexCoords left="0.0625" right="0.9375" top="0" bottom="0.625"/>
				</Texture>
				<FontString name="$parentText" inherits="GameFontNormalSmall" text="VALUE">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="3" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				local text = this.tooltipText
				for index,value in pairs(this.datatable) do text = text.."\n"..index end
				GameTooltip:SetOwner(this,"ANCHOR_RIGHT")
				GameTooltip:SetText(text,nil,nil,nil,nil,1)
				GameTooltip:Show()
			</OnEnter>
			<OnEscapePressed>
				local text = this:GetText()
				if text == "" then this:ClearFocus()
				else this.datatable[string.lower(text)] = nil; this:SetText("")
				end
			</OnEscapePressed>
			<OnEnterPressed>
				local text = this:GetText()
				if not (text == "") then this.datatable[string.lower(text)] = 1; this:SetText("") end
			</OnEnterPressed>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
			<OnEditFocusLost>
				this:SetText("")
			</OnEditFocusLost>
			<OnEditFocusGained>
				this:SetText("")
			</OnEditFocusGained>
		</Scripts>
		<FontString inherits="ChatFontNormal"/>
	</EditBox>
	<Frame name="CooldownsMenuFrame" hidden="true" parent="UIParent" enableMouse="true" movable="true" frameStrata="DIALOG">
		<TitleRegion setAllPoints="true"/>
		<Size>
			<AbsDimension x="550" y="300"/>
		</Size>
		<Anchors> 
			<Anchor point="CENTER"/>
		</Anchors>
		<Layers>
			<Layer level="BACKGROUND">
				<FontString name="$parentTitle" inherits="GameFontHighlight" text="Cooldowns Main Menu">
					<Anchors>
						<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
							<Offset>
								<AbsDimension x="9" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
			<EdgeSize>
				<AbsValue val="16"/>
			</EdgeSize>
			<TileSize>
				<AbsValue val="16"/>
			</TileSize>
			<BackgroundInsets>
				<AbsInset left="5" right="5" top="5" bottom="5"/>
			</BackgroundInsets>
		</Backdrop>
		<Frames>
			<Slider name="CooldownsScaleSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOP" relativePoint="TOP">
						<Offset>
							<AbsDimension x="5" y="-20"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Changes the relative size of the interface, default value: 1.";
						CooldownsScaleSliderText:SetText("Scale"); 
						CooldownsScaleSliderLow:SetText(".5"); 
						CooldownsScaleSliderHigh:SetText("1.5"); 
						this:SetMinMaxValues(.5,1.5); 
						this:SetValueStep(.05);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="CooldownsButtonScaleSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsScaleSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Changes the relative size of the cooldown icons of the interface, default value: 1.";
						CooldownsButtonScaleSliderText:SetText("Button Scale"); 
						CooldownsButtonScaleSliderLow:SetText(".5"); 
						CooldownsButtonScaleSliderHigh:SetText("1.5"); 
						this:SetMinMaxValues(.5,1.5); 
						this:SetValueStep(.05);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="CooldownsMaxDebuffsSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsButtonScaleSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the maximum number of cooldowns that can be shown, default value: 8.";
						CooldownsMaxDebuffsSliderText:SetText("Max Cooldowns"); 
						CooldownsMaxDebuffsSliderLow:SetText("1"); 
						CooldownsMaxDebuffsSliderHigh:SetText("20"); 
						this:SetMinMaxValues(1,20); 
						this:SetValueStep(1);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="CooldownsFormatSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsMaxDebuffsSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if the timers will be displayed as bars or icons, default icons.";
						CooldownsFormatSliderText:SetText("Timer Format"); 
						CooldownsFormatSliderLow:SetText("bars"); 
						CooldownsFormatSliderHigh:SetText("icons"); 
						this:SetMinMaxValues(1,2); 
						this:SetValueStep(1);		
						this.values = {[1] = "bars",[2] = "icons",["bars"] = 1,["icons"] = 2}
					</OnLoad>
					<OnValueChanged> CooldownsFormatSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="CooldownsDebuffLayoutSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsFormatSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the direction in which new cooldowns are added, default value: down.";
						CooldownsDebuffLayoutSliderText:SetText("Cooldown Layout"); 
						CooldownsDebuffLayoutSliderLow:SetText("up"); 
						CooldownsDebuffLayoutSliderHigh:SetText("right"); 
						this:SetMinMaxValues(1,4); 
						this:SetValueStep(1);	
						this.values = {[1] = "up",[2] = "down",[3] = "left",[4] = "right",["up"] = 1,["down"] = 2,["left"] = 3,["right"] = 4,}
					</OnLoad>
					<OnValueChanged> CooldownsDebuffLayoutSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="CooldownsDebuffSortSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsDebuffLayoutSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the manner in which cooldowns are sorted: time added or time remaining, default value: remaining.";
						CooldownsDebuffSortSliderText:SetText("Cooldown Sort"); 
						CooldownsDebuffSortSliderLow:SetText("added"); 
						CooldownsDebuffSortSliderHigh:SetText("remaining"); 
						this:SetMinMaxValues(1,2); 
						this:SetValueStep(1);	
						this.values = {[1] = "added",[2] = "remaining",["added"] = 1,["remaining"] = 2,}
					</OnLoad>
					<OnValueChanged> CooldownsDebuffSortSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="CooldownsBarLengthSlider" inherits="CooldownsSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsDebuffSortSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines how long the timer bars are, default 150.";
						CooldownsBarLengthSliderText:SetText("Bar Length"); 
						CooldownsBarLengthSliderLow:SetText("50"); 
						CooldownsBarLengthSliderHigh:SetText("250"); 
						this:SetMinMaxValues(50,250); 
						this:SetValueStep(5);	
					</OnLoad>
				</Scripts>
			</Slider>
			<CheckButton name="CooldownsEnabledCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
						<Offset>
							<AbsDimension x="10" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Turns the addon on or off, default state: on.";
						CooldownsEnabledCheckButtonText:SetText("Enabled"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsLockedCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT"  relativeTo="CooldownsEnabledCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Locks the addon, hiding the drag icon, default state: unlocked.";
						CooldownsLockedCheckButtonText:SetText("Locked"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsNamesCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsLockedCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Toggles the showing of the header, default state: shown.";
						CooldownsNamesCheckButtonText:SetText("Showing Header"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsExpAlertCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsNamesCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if timer text turns red and the timer icon highlights for 2 seconds at less than 5 seconds remaining, default state: on.";
						CooldownsExpAlertCheckButtonText:SetText("Expiration Alerts"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsClickableCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsExpAlertCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if cooldowns can be clicked to remove them, default state: on.";
						CooldownsClickableCheckButtonText:SetText("Clickable Debuffs"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsPlaySoundsCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsClickableCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if a sound will be played when a timer hits five seconds left, default state: off.";
						CooldownsPlaySoundsCheckButtonText:SetText("Play Sounds"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="CooldownsDoTimerCheckButton" inherits="CooldownsCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsPlaySoundsCheckButton">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if the cooldowns will be integrated into DoTimer or displayed separately, default state: separate.";
						CooldownsDoTimerCheckButtonText:SetText("Integrated"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<Editbox name="CooldownsBlockCDsEditBox" inherits="CooldownsEditBoxTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsDoTimerCheckButton">
						<Offset>
							<AbsDimension x="8" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Allows previously tracked cooldowns to be blocked from appearing.  Press ENTER after typing in a name to add it to the list, or ESCAPE to remove it.  Current List:" 
						CooldownsBlockCDsEditBoxText:SetText("Blocked Timers"); 
					</OnLoad>
					<OnShow> this.datatable = Cooldowns_Settings.blocked; </OnShow>
				</Scripts>
			</Editbox>
			<Button name="CooldownsResetButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="-10" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Resets all settings to their default value." 
						CooldownsResetButtonText:SetText("Reset"); 
					</OnLoad>
					<OnClick> Cooldowns_Commands("reset"); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsResetPositionButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsResetButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Resets the position of the drag icon to the middle of the screen." 
						CooldownsResetPositionButtonText:SetText("Reset Position"); 
					</OnLoad>
					<OnClick> Cooldowns_Commands("reset position"); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsAuthorInfoButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsResetPositionButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame information about the current version and about the author." 
						CooldownsAuthorInfoButtonText:SetText("Author Info"); 
					</OnLoad>
					<OnClick> Cooldowns_Commands("help version"); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsBeginnerButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="CooldownsAuthorInfoButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame basic info about the mod, for beginners." 
						CooldownsBeginnerButtonText:SetText("Beginners"); 
					</OnLoad>
					<OnClick> Cooldowns_Commands("help new"); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsDoneButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-10" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Closes the menu and applies all changes made." 
						CooldownsDoneButtonText:SetText("Done"); 
					</OnLoad>
					<OnClick> Cooldowns_ParseMenuData(); CooldownsMenuFrame:Hide(); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsCancelButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsDoneButton">
						<Offset>
							<AbsDimension x="0" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Closes the window without making any changes." 
						CooldownsCancelButtonText:SetText("Cancel"); 
					</OnLoad>
					<OnClick> CooldownsMenuFrame:Hide(); </OnClick>
				</Scripts>
			</Button>
			<Button name="CooldownsApplyButton" inherits="CooldownsButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="CooldownsCancelButton">
						<Offset>
							<AbsDimension x="0" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Applies all changes made without closing the window." 
						CooldownsApplyButtonText:SetText("Apply"); 
					</OnLoad>
					<OnClick> Cooldowns_ParseMenuData(); </OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnLoad>
				this:SetBackdropBorderColor(0.4, 0.4, 0.4);
				this:SetBackdropColor(0.5, 0.5, 0.5);
				table.insert(UISpecialFrames,"CooldownsMenuFrame")
			</OnLoad>
			<OnShow> Cooldowns_SetMenuData(); </OnShow>
		</Scripts>
	</Frame>
</Ui>